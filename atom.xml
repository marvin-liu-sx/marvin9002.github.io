<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>柳英伟博客</title>
  
  <subtitle>柳英伟博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://marvin9002.github.com/"/>
  <updated>2018-04-10T11:18:24.267Z</updated>
  <id>http://marvin9002.github.com/</id>
  
  <author>
    <name>柳英伟</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySQL面试知识</title>
    <link href="http://marvin9002.github.com/2018/04/10/MySql%E9%9D%A2%E8%AF%95%E7%9F%A5%E8%AF%86/"/>
    <id>http://marvin9002.github.com/2018/04/10/MySql面试知识/</id>
    <published>2018-04-10T09:55:04.000Z</published>
    <updated>2018-04-10T11:18:24.267Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css"><div class=".article-gallery" <!--="" gfm-toc="" --=""><ul><li><a href="#一存储引擎">一、存储引擎</a><ul><li><a href="#innodb">InnoDB</a></li><li><a href="#myisam">MyISAM</a></li><li><a href="#比较">比较</a></li></ul></li><li><a href="#二数据类型">二、数据类型</a><ul><li><a href="#整型">整型</a></li><li><a href="#浮点数">浮点数</a></li><li><a href="#字符串">字符串</a></li><li><a href="#时间和日期">时间和日期</a></li></ul></li><li><a href="#三索引">三、索引</a><ul><li><a href="#索引分类">索引分类</a></li><li><a href="#索引的优点">索引的优点</a></li><li><a href="#索引优化">索引优化</a></li><li><a href="#b-tree-和-b+tree-原理">B-Tree 和 B+Tree 原理</a></li></ul></li><li><a href="#四查询性能优化">四、查询性能优化</a></li><li><a href="#五切分">五、切分</a><ul><li><a href="#垂直切分">垂直切分</a></li><li><a href="#水平切分">水平切分</a></li><li><a href="#切分的选择">切分的选择</a></li><li><a href="#存在的问题">存在的问题</a></li></ul></li><li><a href="#六故障转移和故障恢复">六、故障转移和故障恢复</a></li><li><a href="#参考资料">参考资料</a><!-- GFM-TOC --></li></ul><a id="more"></a><h1 id="一、存储引擎"><a href="#一、存储引擎" class="headerlink" title="一、存储引擎"></a>一、存储引擎</h1><h2 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h2><p>InnoDB 是 MySQL 默认的事务型存储引擎，只有在需要 InnoDB 不支持的特性时，才考虑使用其它存储引擎。</p><p>采用 MVCC 来支持高并发，并且实现了四个标准的隔离级别，默认级别是可重复读。</p><p>表是基于聚簇索引建立的，它对主键的查询性能有很高的提升。</p><p>内部做了很多优化，包括从磁盘读取数据时采用的可预测性读、能够自动在内存中创建哈希索引以加速读操作的自适应哈希索引、能够加速插入操作的插入缓冲区等。</p><p>通过一些机制和工具支持真正的热备份。</p><h2 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h2><p>MyISAM 提供了大量的特性，包括全文索引、压缩、空间函数（GIS）等。但 MyISAM 不支持事务和行级锁，而且崩溃后无法安全恢复。</p><p>只能对整张表加锁，而不是针对行。</p><p>可以手工或者自动执行检查和修复操作，但是和事务恢复以及崩溃恢复不同，可能导致一些数据丢失，而且修复操作是非常慢的。</p><p>可以包含动态或者静态的行。</p><p>如果指定了 DELAY_KEY_WRITE 选项，在每次修改执行完成时，不会立即将修改的索引数据写入磁盘，而是会写到内存中的键缓冲区，只有在清理键缓冲区或者关闭表的时候才会将对应的索引块写入磁盘。这种方式可以极大的提升写入性能，但是在数据库或者主机崩溃时会造成索引损坏，需要执行修复操作。</p><p>如果表在创建并导入数据以后，不会再进行修改操作，那么这样的表适合采用 MyISAM 压缩表。</p><p>对于只读数据，或者表比较小、可以容忍修复操作，则依然可以继续使用 MyISAM。</p><p>MyISAM 设计简单，数据以紧密格式存储，所以在某些场景下性能很好。</p><h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><ol><li>事务：InnoDB 是事务型的。</li><li>备份：InnoDB 支持在线热备份。</li><li>崩溃恢复：MyISAM 崩溃后发生损坏的概率比 InnoDB 高很多，而且恢复的速度也更慢。</li><li>并发：MyISAM 只支持表级锁，而 InnoDB 还支持行级锁。</li><li>其它特性：MyISAM 支持全文索引，地理空间索引。</li></ol><h1 id="二、数据类型"><a href="#二、数据类型" class="headerlink" title="二、数据类型"></a>二、数据类型</h1><h2 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h2><p>TINYINT, SMALLINT, MEDIUMINT, INT, BIGINT 分别使用 8, 16, 24, 32, 64 位存储空间，一般情况下越小的列越好。</p><p>INT(11) 中的数字只是规定了交互工具显示字符的个数，对于存储和计算来说是没有意义的。</p><h2 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h2><p>FLOAT 和 DOUBLE 为浮点类型，DECIMAL 为高精度小数类型。CPU 原生支持浮点运算，但是不支持 DECIMAl 类型的计算，因此 DECIMAL 的计算比浮点类型需要更高的代价。</p><p>FLOAT、DOUBLE 和 DECIMAL 都可以指定列宽，例如 DECIMAL(18, 9) 表示总共 18 位，取 9 位存储小数部分，剩下 9 位存储整数部分。</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>主要有 CHAR 和 VARCHAR 两种类型，一种是定长的，一种是变长的。</p><p>VARCHAR 这种变长类型能够节省空间，因为只需要存储必要的内容。但是在执行 UPDATE 时可能会使行变得比原来长，当超出一个页所能容纳的大小时，就要执行额外的操作。MyISAM 会将行拆成不同的片段存储，而 InnoDB 则需要分裂页来使行放进页内。</p><p>VARCHAR 会保留字符串末尾的空格，而 CHAR 会删除。</p><h2 id="时间和日期"><a href="#时间和日期" class="headerlink" title="时间和日期"></a>时间和日期</h2><p>MySQL 提供了两种相似的日期时间类型：DATATIME 和 TIMESTAMP。</p><h3 id="1-DATATIME"><a href="#1-DATATIME" class="headerlink" title="1. DATATIME"></a>1. DATATIME</h3><p>能够保存从 1001 年到 9999 年的日期和时间，精度为秒，使用 8 字节的存储空间。</p><p>它与时区无关。</p><p>默认情况下，MySQL 以一种可排序的、无歧义的格式显示 DATATIME 值，例如“2008-01-16 22:37:08”，这是 ANSI 标准定义的日期和时间表示方法。</p><h3 id="2-TIMESTAMP"><a href="#2-TIMESTAMP" class="headerlink" title="2. TIMESTAMP"></a>2. TIMESTAMP</h3><p>和 UNIX 时间戳相同，保存从 1970 年 1 月 1 日午夜（格林威治时间）以来的秒数，使用 4 个字节，只能表示从 1970 年 到 2038 年。</p><p>它和时区有关。</p><p>MySQL 提供了 FROM_UNIXTIME() 函数把 UNIX 时间戳转换为日期，并提供了 UNIX_TIMESTAMP() 函数把日期转换为 UNIX 时间戳。</p><p>默认情况下，如果插入时没有指定 TIMESTAMP 列的值，会将这个值设置为当前时间。</p><p>应该尽量使用 TIMESTAMP，因为它比 DATETIME 空间效率更高。</p><h1 id="三、索引"><a href="#三、索引" class="headerlink" title="三、索引"></a>三、索引</h1><p>索引是在存储引擎层实现的，而不是在服务器层实现的，所以不同存储引擎具有不同的索引类型和实现。</p><p>索引能够轻易将查询性能提升几个数量级。</p><p>对于非常小的表、大部分情况下简单的全表扫描比建立索引更高效。对于中到大型的表，索引就非常有效。但是对于特大型的表，建立和使用索引的代价将会随之增长。这种情况下，需要用到一种技术可以直接区分出需要查询的一组数据，而不是一条记录一条记录地匹配，例如可以使用分区技术。</p><h2 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h2><h3 id="1-B-Tree-索引"><a href="#1-B-Tree-索引" class="headerlink" title="1. B+Tree 索引"></a>1. B+Tree 索引</h3><p><div align="center"> <a href="https://github.com/CyC2018/Interview-Notebook/raw/master/pics/c23957e9-a572-44f8-be15-f306c8b92722.jpg" class="gallery-item" target="_blank" rel="noopener"><img src="https://github.com/CyC2018/Interview-Notebook/raw/master/pics/c23957e9-a572-44f8-be15-f306c8b92722.jpg"></a> </div><br></p><p>《高性能 MySQL》一书使用 B-Tree 进行描述，其实从技术上来说这种索引是 B+Tree。</p><p>B+Tree 索引是大多数 MySQL 存储引擎的默认索引类型。</p><p>因为不再需要进行全表扫描，只需要对树进行搜索即可，因此查找速度快很多。</p><p>可以指定多个列作为索引列，多个索引列共同组成键。B+Tree 索引适用于全键值、键值范围和键前缀查找，其中键前缀查找只适用于最左前缀查找。</p><p>除了用于查找，还可以用于排序和分组。</p><p>如果不是按照索引列的顺序进行查找，则无法使用索引。</p><h3 id="2-哈希索引"><a href="#2-哈希索引" class="headerlink" title="2. 哈希索引"></a>2. 哈希索引</h3><p>基于哈希表实现，优点是查找非常快。</p><p>在 MySQL 中只有 Memory 引擎显式支持哈希索引。</p><p>InnoDB 引擎有一个特殊的功能叫“自适应哈希索引”，当某个索引值被使用的非常频繁时，会在 B+Tree 索引之上再创建一个哈希索引，这样就让 B+Tree 索引具有哈希索引的一些优点，比如快速的哈希查找。</p><p>限制：哈希索引只包含哈希值和行指针，而不存储字段值，所以不能使用索引中的值来避免读取行。不过，访问内存中的行的速度很快，所以大部分情况下这一点对性能影响并不明显；无法用于分组与排序；只支持精确查找，无法用于部分查找和范围查找；如果哈希冲突很多，查找速度会变得很慢。</p><h3 id="3-空间索引（R-Tree）"><a href="#3-空间索引（R-Tree）" class="headerlink" title="3. 空间索引（R-Tree）"></a>3. 空间索引（R-Tree）</h3><p>MyISAM 存储引擎支持空间索引，可以用于地理数据存储。</p><p>空间索引会从所有维度来索引数据，可以有效地使用任意维度来进行组合查询。</p><h3 id="4-全文索引"><a href="#4-全文索引" class="headerlink" title="4. 全文索引"></a>4. 全文索引</h3><p>MyISAM 存储引擎支持全文索引，用于查找文本中的关键词，而不是直接比较索引中的值。</p><p>使用 MATCH AGAINST，而不是普通的 WHERE。</p><h2 id="索引的优点"><a href="#索引的优点" class="headerlink" title="索引的优点"></a>索引的优点</h2><ul><li><p>大大减少了服务器需要扫描的数据量；</p></li><li><p>帮助服务器避免进行排序和创建临时表；</p></li><li><p>将随机 I/O 变为顺序 I/O。</p></li></ul><h2 id="索引优化"><a href="#索引优化" class="headerlink" title="索引优化"></a>索引优化</h2><h3 id="1-独立的列"><a href="#1-独立的列" class="headerlink" title="1. 独立的列"></a>1. 独立的列</h3><p>在进行查询时，索引列不能是表达式的一部分，也不能是函数的参数，否则无法使用索引。</p><p>例如下面的查询不能使用 actor_id 列的索引：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> actor_id <span class="keyword">FROM</span> sakila.actor <span class="keyword">WHERE</span> actor_id + <span class="number">1</span> = <span class="number">5</span>;</span><br></pre></td></tr></table></figure><h3 id="2-前缀索引"><a href="#2-前缀索引" class="headerlink" title="2. 前缀索引"></a>2. 前缀索引</h3><p>对于 BLOB、TEXT 和 VARCHAR 类型的列，必须使用前缀索引，只索引开始的部分字符。</p><p>对于前缀长度的选取需要根据  <strong>索引选择性</strong>  来确定：不重复的索引值和记录总数的比值。选择性越高，查询效率也越高。最大值为 1，此时每个记录都有唯一的索引与其对应。</p><h3 id="3-多列索引"><a href="#3-多列索引" class="headerlink" title="3. 多列索引"></a>3. 多列索引</h3><p>在需要使用多个列作为条件进行查询时，使用多列索引比使用多个单列索引性能更好。例如下面的语句中，最好把 actor_id 和 film_id 设置为多列索引。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> film_id, actor_ <span class="keyword">id</span> <span class="keyword">FROM</span> sakila.film_actor</span><br><span class="line"><span class="keyword">WhERE</span> actor_id = <span class="number">1</span> <span class="keyword">AND</span> film_id = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="4-索引列的顺序"><a href="#4-索引列的顺序" class="headerlink" title="4. 索引列的顺序"></a>4. 索引列的顺序</h3><p>让选择性最强的索引列放在前面，例如下面显示的结果中 customer_id 的选择性比 staff_id 更高，因此最好把 customer_id 列放在多列索引的前面。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> staff_id)/<span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> staff_id_selectivity,</span><br><span class="line"><span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> customer_id)/<span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> customer_id_selectivity,</span><br><span class="line"><span class="keyword">COUNT</span>(*)</span><br><span class="line"><span class="keyword">FROM</span> payment;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   staff_id_selectivity: 0.0001</span><br><span class="line">customer_id_selectivity: 0.0373</span><br><span class="line">               COUNT(*): 16049</span><br></pre></td></tr></table></figure><h3 id="5-聚簇索引"><a href="#5-聚簇索引" class="headerlink" title="5. 聚簇索引"></a>5. 聚簇索引</h3><p><div align="center"> <a href="../pics//e800b001-7779-495b-8459-d33a7440d7b8.jpg" class="gallery-item"><img src="../pics//e800b001-7779-495b-8459-d33a7440d7b8.jpg"></a> </div><br></p><p>聚簇索引并不是一种索引类型，而是一种数据存储方式。</p><p>术语“聚簇”表示数据行和相邻的键值紧密地存储在一起，InnoDB 的聚簇索引的数据行存放在 B+Tree 的叶子页中。</p><p>因为无法把数据行存放在两个不同的地方，所以一个表只能有一个聚簇索引。</p><p><strong>优点</strong> </p><ol><li>可以把相关数据保存在一起，减少 I/O 操作；</li><li>因为数据保存在 B+Tree 中，因此数据访问更快。</li></ol><p><strong>缺点</strong> </p><ol><li>聚簇索引最大限度提高了 I/O 密集型应用的性能，但是如果数据全部放在内存，就没必要用聚簇索引。</li><li>插入速度严重依赖于插入顺序，按主键的顺序插入是最快的。</li><li>更新操作代价很高，因为每个被更新的行都会移动到新的位置。</li><li>当插入到某个已满的页中，存储引擎会将该页分裂成两个页面来容纳该行，页分裂会导致表占用更多的磁盘空间。</li><li>如果行比较稀疏，或者由于页分裂导致数据存储不连续时，聚簇索引可能导致全表扫描速度变慢。</li></ol><h3 id="6-覆盖索引"><a href="#6-覆盖索引" class="headerlink" title="6. 覆盖索引"></a>6. 覆盖索引</h3><p>索引包含所有需要查询的字段的值。</p><p><strong>优点</strong> </p><ol><li>因为索引条目通常远小于数据行的大小，所以若只读取索引，能大大减少数据访问量。</li><li>一些存储引擎（例如 MyISAM）在内存中只缓存索引，而数据依赖于操作系统来缓存。因此，只访问索引可以不使用系统调用（通常比较费时）。</li><li>对于 InnoDB 引擎，若二级索引能够覆盖查询，则无需访问聚簇索引。</li></ol><h2 id="B-Tree-和-B-Tree-原理"><a href="#B-Tree-和-B-Tree-原理" class="headerlink" title="B-Tree 和 B+Tree 原理"></a>B-Tree 和 B+Tree 原理</h2><h3 id="1-B-Tree"><a href="#1-B-Tree" class="headerlink" title="1. B-Tree"></a>1. B-Tree</h3><p><div align="center"> <a href="../pics//5ed71283-a070-4b21-85ae-f2cbfd6ba6e1.jpg" class="gallery-item"><img src="../pics//5ed71283-a070-4b21-85ae-f2cbfd6ba6e1.jpg"></a> </div><br></p><p>为了描述 B-Tree，首先定义一条数据记录为一个二元组 [key, data]，key 为记录的键，data 为数据记录除 key 外的数据。</p><p>B-Tree 是满足下列条件的数据结构：</p><ul><li>所有叶节点具有相同的深度，也就是说 B-Tree 是平衡的；</li><li>一个节点中的 key 从左到右非递减排列；</li><li>如果某个指针的左右相邻 key 分别是 key<sub>i</sub> 和 key<sub>i+1</sub>，且不为 null，则该指针指向节点的所有 key 大于 key<sub>i</sub> 且小于 key<sub>i+1</sub>。</li></ul><p>在 B-Tree 中按 key 检索数据的算法非常直观：首先从根节点进行二分查找，如果找到则返回对应节点的 data，否则对相应区间的指针指向的节点递归进行查找，直到找到节点或找到 null 指针，前者查找成功，后者查找失败。</p><p>由于插入删除新的数据记录会破坏 B-Tree 的性质，因此在插入删除时，需要对树进行一个分裂、合并、转移等操作以保持 B-Tree 性质。</p><h3 id="2-B-Tree"><a href="#2-B-Tree" class="headerlink" title="2. B+Tree"></a>2. B+Tree</h3><p><div align="center"> <a href="../pics//63cd5b50-d6d8-4df6-8912-ef4a1dd5ba13.jpg" class="gallery-item"><img src="../pics//63cd5b50-d6d8-4df6-8912-ef4a1dd5ba13.jpg"></a> </div><br></p><p>与 B-Tree 相比，B+Tree 有以下不同点：</p><ul><li>每个节点的指针上限为 2d 而不是 2d+1；</li><li>内节点不存储 data，只存储 key，叶子节点不存储指针。</li></ul><h3 id="3-带有顺序访问指针的-B-Tree"><a href="#3-带有顺序访问指针的-B-Tree" class="headerlink" title="3. 带有顺序访问指针的 B+Tree"></a>3. 带有顺序访问指针的 B+Tree</h3><p><div align="center"> <a href="../pics//1ee5f0a5-b8df-43b9-95ab-c516c54ec797.jpg" class="gallery-item"><img src="../pics//1ee5f0a5-b8df-43b9-95ab-c516c54ec797.jpg"></a> </div><br></p><p>一般在数据库系统或文件系统中使用的 B+Tree 结构都在经典 B+Tree 基础上进行了优化，在叶子节点增加了顺序访问指针，做这个优化的目的是为了提高区间访问的性能。</p><h3 id="4-为什么使用-B-Tree-和-B-Tree"><a href="#4-为什么使用-B-Tree-和-B-Tree" class="headerlink" title="4. 为什么使用 B-Tree 和 B+Tree"></a>4. 为什么使用 B-Tree 和 B+Tree</h3><p>红黑树等数据结构也可以用来实现索引，但是文件系统及数据库系统普遍采用 B-/+Tree 作为索引结构。</p><p>页是计算机管理存储器的逻辑块，硬件及操作系统往往将主存和磁盘存储区分割为连续的大小相等的块，每个存储块称为一页（在许多操作系统中，页的大小通常为 4k），主存和磁盘以页为单位交换数据。</p><p>一般来说，索引本身也很大，不可能全部存储在内存中，因此索引往往以索引文件的形式存储的磁盘上。为了减少磁盘 I/O，磁盘往往不是严格按需读取，而是每次都会预读。这样做的理论依据是计算机科学中著名的局部性原理：当一个数据被用到时，其附近的数据也通常会马上被使用。数据库系统的设计者巧妙利用了磁盘预读原理，将一个节点的大小设为等于一个页，这样每个节点只需要一次 I/O 就可以完全载入。B-Tree 中一次检索最多需要 h-1 次 I/O（根节点常驻内存），渐进复杂度为 O(h)=O(log<sub>d</sub>N)。一般实际应用中，出度 d 是非常大的数字，通常超过 100，因此 h 非常小（通常不超过 3）。而红黑树这种结构，h 明显要深的多。并且于逻辑上很近的节点（父子）物理上可能很远，无法利用局部性，效率明显比 B-Tree 差很多。</p><p>B+Tree 更适合外存索引，原因和内节点出度 d 有关。由于 B+Tree 内节点去掉了 data 域，因此可以拥有更大的出度，拥有更好的性能。</p><h1 id="四、查询性能优化"><a href="#四、查询性能优化" class="headerlink" title="四、查询性能优化"></a>四、查询性能优化</h1><h3 id="Explain"><a href="#Explain" class="headerlink" title="Explain"></a>Explain</h3><p>用来分析 SQL 语句，分析结果中比较重要的字段有：</p><ul><li><p>select_type : 查询类型，有简单查询、联合查询和子查询</p></li><li><p>key : 使用的索引</p></li><li><p>rows : 扫描的行数</p></li></ul><h3 id="减少返回的列"><a href="#减少返回的列" class="headerlink" title="减少返回的列"></a>减少返回的列</h3><p>慢查询主要是因为访问了过多数据，除了访问过多行之外，也包括访问过多列。</p><p>最好不要使用 SELECT * 语句，要根据需要选择查询的列。</p><h3 id="减少返回的行"><a href="#减少返回的行" class="headerlink" title="减少返回的行"></a>减少返回的行</h3><p>最好使用 LIMIT 语句来取出想要的那些行。</p><p>还可以建立索引来减少条件语句的全表扫描。例如对于下面的语句，不使用索引的情况下需要进行全表扫描，而使用索引只需要扫描几行记录即可，使用 Explain 语句可以通过观察 rows 字段来看出这种差异。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> sakila.film_actor <span class="keyword">WHERE</span> film_id = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="拆分大的-DELETE-或-INSERT-语句"><a href="#拆分大的-DELETE-或-INSERT-语句" class="headerlink" title="拆分大的 DELETE 或 INSERT 语句"></a>拆分大的 DELETE 或 INSERT 语句</h3><p>如果一次性执行的话，可能一次锁住很多数据、占满整个事务日志、耗尽系统资源、阻塞很多小的但重要的查询。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELEFT FROM messages WHERE <span class="keyword">create</span> &lt; <span class="keyword">DATE_SUB</span>(<span class="keyword">NOW</span>(), <span class="built_in">INTERVAL</span> <span class="number">3</span> <span class="keyword">MONTH</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rows_affected = 0</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    rows_affected = do_query(</span><br><span class="line">    <span class="string">"DELETE FROM messages WHERE create  &lt; DATE_SUB(NOW(), INTERVAL 3 MONTH) LIMIT 10000"</span>)</span><br><span class="line">&#125; <span class="keyword">while</span> rows_affected &gt; <span class="number">0</span></span><br></pre></td></tr></table></figure><h1 id="五、切分"><a href="#五、切分" class="headerlink" title="五、切分"></a>五、切分</h1><p>随着时间和业务的发展，数据库中的表会越来越多，并且表中的数据量也会越来越大，那么读写操作的开销也会随着增大。</p><h2 id="垂直切分"><a href="#垂直切分" class="headerlink" title="垂直切分"></a>垂直切分</h2><p>将表按功能模块、关系密切程度划分出来，部署到不同的库上。例如，我们会建立商品数据库 payDB、用户数据库 userDB 等，分别用来存储项目与商品有关的表和与用户有关的表。</p><h2 id="水平切分"><a href="#水平切分" class="headerlink" title="水平切分"></a>水平切分</h2><p>把表中的数据按照某种规则存储到多个结构相同的表中，例如按 id 的散列值、性别等进行划分。</p><h2 id="切分的选择"><a href="#切分的选择" class="headerlink" title="切分的选择"></a>切分的选择</h2><p>如果数据库中的表太多，并且项目各项业务逻辑清晰，那么垂直切分是首选。</p><p>如果数据库的表不多，但是单表的数据量很大，应该选择水平切分。</p><h2 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h2><h3 id="1-事务问题"><a href="#1-事务问题" class="headerlink" title="1. 事务问题"></a>1. 事务问题</h3><p>在执行分库分表之后，由于数据存储到了不同的库上，数据库事务管理出现了困难。如果依赖数据库本身的分布式事务管理功能去执行事务，将付出高昂的性能代价；如果由应用程序去协助控制，形成程序逻辑上的事务，又会造成编程方面的负担。</p><h3 id="2-跨库跨表连接问题"><a href="#2-跨库跨表连接问题" class="headerlink" title="2. 跨库跨表连接问题"></a>2. 跨库跨表连接问题</h3><p>在执行了分库分表之后，难以避免会将原本逻辑关联性很强的数据划分到不同的表、不同的库上。这时，表的连接操作将受到限制，我们无法连接位于不同分库的表，也无法连接分表粒度不同的表，导致原本只需要一次查询就能够完成的业务需要进行多次才能完成。</p><h3 id="3-额外的数据管理负担和数据运算压力"><a href="#3-额外的数据管理负担和数据运算压力" class="headerlink" title="3. 额外的数据管理负担和数据运算压力"></a>3. 额外的数据管理负担和数据运算压力</h3><p>最显而易见的就是数据的定位问题和数据的增删改查的重复执行问题，这些都可以通过应用程序解决，但必然引起额外的逻辑运算。</p><h1 id="六、故障转移和故障恢复"><a href="#六、故障转移和故障恢复" class="headerlink" title="六、故障转移和故障恢复"></a>六、故障转移和故障恢复</h1><p>故障转移也叫做切换，当主库出现故障时就切换到备库，使备库成为主库。故障恢复顾名思义就是从故障中恢复过来，并且保证数据的正确性。</p><h3 id="提升备库或切换角色"><a href="#提升备库或切换角色" class="headerlink" title="提升备库或切换角色"></a>提升备库或切换角色</h3><p>提升一台备库为主库，或者在一个主-主复制结构中调整主动和被动角色。</p><h3 id="虚拟-IP-地址和-IP-托管"><a href="#虚拟-IP-地址和-IP-托管" class="headerlink" title="虚拟 IP 地址和 IP 托管"></a>虚拟 IP 地址和 IP 托管</h3><p>为 MySQL 实例指定一个逻辑 IP 地址，当 MySQL 实例失效时，可以将 IP 地址转移到另一台 MySQL 服务器上。</p><h3 id="中间件解决方案"><a href="#中间件解决方案" class="headerlink" title="中间件解决方案"></a>中间件解决方案</h3><p>通过代理，可以路由流量到可以使用的服务器上。</p><h3 id="在应用中处理故障转移"><a href="#在应用中处理故障转移" class="headerlink" title="在应用中处理故障转移"></a>在应用中处理故障转移</h3><p>将故障转移整合到应用中可能导致应用变得太过笨拙。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li>BaronScbwartz, PeterZaitsev, VadimTkacbenko, 等. 高性能 MySQL[M]. 电子工业出版社, 2013.</li><li><a href="https://medium.com/@jeeyoungk/how-sharding-works-b4dec46b3f6" target="_blank" rel="noopener">How Sharding Works</a></li><li><a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html" target="_blank" rel="noopener">MySQL 索引背后的数据结构及算法原理 </a></li><li><a href="https://www.jfox.info/20-tiao-mysql-xing-nen-you-hua-de-zui-jia-jing-yan.html" target="_blank" rel="noopener">20+ 条 MySQL 性能优化的最佳经验 </a></li><li><a href="https://www.i3geek.com/archives/1108" target="_blank" rel="noopener">数据库为什么分库分表？mysql的分库分表方案</a></li></ul></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css&quot;&gt;&lt;div class=&quot;.article-gallery&quot; &lt;!--=&quot;&quot; gfm-toc=&quot;&quot; --=&quot;&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#一存储引擎&quot;&gt;一、存储引擎&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#innodb&quot;&gt;InnoDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#myisam&quot;&gt;MyISAM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#比较&quot;&gt;比较&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#二数据类型&quot;&gt;二、数据类型&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#整型&quot;&gt;整型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#浮点数&quot;&gt;浮点数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#字符串&quot;&gt;字符串&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#时间和日期&quot;&gt;时间和日期&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#三索引&quot;&gt;三、索引&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#索引分类&quot;&gt;索引分类&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#索引的优点&quot;&gt;索引的优点&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#索引优化&quot;&gt;索引优化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#b-tree-和-b+tree-原理&quot;&gt;B-Tree 和 B+Tree 原理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#四查询性能优化&quot;&gt;四、查询性能优化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#五切分&quot;&gt;五、切分&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#垂直切分&quot;&gt;垂直切分&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#水平切分&quot;&gt;水平切分&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#切分的选择&quot;&gt;切分的选择&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#存在的问题&quot;&gt;存在的问题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#六故障转移和故障恢复&quot;&gt;六、故障转移和故障恢复&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#参考资料&quot;&gt;参考资料&lt;/a&gt;&lt;!-- GFM-TOC --&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://marvin9002.github.com/categories/MySQL/"/>
    
    
      <category term="面试" scheme="http://marvin9002.github.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="存储引擎" scheme="http://marvin9002.github.com/tags/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/"/>
    
      <category term="数据类型" scheme="http://marvin9002.github.com/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
      <category term="时间和日期" scheme="http://marvin9002.github.com/tags/%E6%97%B6%E9%97%B4%E5%92%8C%E6%97%A5%E6%9C%9F/"/>
    
      <category term="索引" scheme="http://marvin9002.github.com/tags/%E7%B4%A2%E5%BC%95/"/>
    
  </entry>
  
  <entry>
    <title>PHP面试知识梳理</title>
    <link href="http://marvin9002.github.com/2018/03/31/PHP%E9%9D%A2%E8%AF%95%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/"/>
    <id>http://marvin9002.github.com/2018/03/31/PHP面试知识梳理/</id>
    <published>2018-03-31T09:55:04.000Z</published>
    <updated>2018-04-03T08:54:26.225Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css"><div class=".article-gallery" <p="">昨天在思否上发了这篇整理，晚上10点多看到了很多赞收藏和关注，其实挺愧疚的，<br>因为最近在找工作这篇文章并没有整理完。<br>看到这个还挺受欢迎的，也因为新工作基本定下来了，<br>现在的公司正常交接中，打算下周末之前把这个知识梳理整理完，<br>感谢各位的点赞、收藏和关注，大家一起努力。<p></p><a id="more"></a><h1 id="算法与数据结构"><a href="#算法与数据结构" class="headerlink" title="算法与数据结构"></a>算法与数据结构</h1><h3 id="BTree和B-tree"><a href="#BTree和B-tree" class="headerlink" title="BTree和B+tree"></a>BTree和B+tree</h3><ul><li><p>BTree</p><p>  B树是为了磁盘或者其他存储设备而设计的一种多叉平衡查找树，相对于二叉树，B树的每个内节点有多个分支，即多叉。<br>  参考文章：<a href="https://www.jianshu.com/p/da59af78ec59" target="_blank" rel="noopener">https://www.jianshu.com/p/da59af78ec59</a></p></li><li><p>B+Tree</p><p>  B+树是B树的变体，也是一种多路搜索树。<br>  参考文章：<a href="https://www.jianshu.com/p/da59af78ec59" target="_blank" rel="noopener">https://www.jianshu.com/p/da59af78ec59</a></p></li></ul><h3 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h3><ul><li><p>快速排序</p><p>  快速排序是十分常用的高效率的算法，其思想是：先选一个标尺，用它把整个队列过一遍筛选，以保证其左边的元素都不大于它，其右边的元素都不小与它</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">function quickSort($arr)&#123;</span><br><span class="line"></span><br><span class="line">  // 获取数组长度</span><br><span class="line">  $length = count($arr);</span><br><span class="line"></span><br><span class="line">  // 判断长度是否需要继续二分比较</span><br><span class="line">  if($length &lt;= 1)&#123;</span><br><span class="line">    return $arr;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 定义基准元素</span><br><span class="line">  $base = $arr[0];</span><br><span class="line"></span><br><span class="line">  // 定义两个空数组，用于存放和基准元素的比较后的结果</span><br><span class="line">  $left = [];</span><br><span class="line">  $right = [];</span><br><span class="line"></span><br><span class="line">  // 遍历数组</span><br><span class="line">  for ($i=1; $i &lt; $length; $i++) &#123; </span><br><span class="line"></span><br><span class="line">    // 和基准元素作比较</span><br><span class="line">    if ($arr[$i] &gt; $base) &#123;</span><br><span class="line">      $right[] = $arr[$i];</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">      $left[] = $arr[$i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 然后递归分别处理left和right</span><br><span class="line">  $left = quickSort($left);</span><br><span class="line">  $right = quickSort($right);</span><br><span class="line"></span><br><span class="line">  // 合并</span><br><span class="line">  return array_merge($left,[$base],$right);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>冒泡排序</p><p>思路：法如其名，就像冒泡一样，每次从数组中冒出一个最大的数<br>比如：2，4，1<br>第一次冒出4：2，1，4<br>第二次冒出2：1，2，4</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">function bubbleSort($arr)&#123;</span><br><span class="line"></span><br><span class="line">  // 获取数组长度</span><br><span class="line">  $length = count($arr);</span><br><span class="line"></span><br><span class="line">  // 第一层循环控制冒泡轮次</span><br><span class="line">  for ($i=0; $i &lt; $length-1; $i++) &#123; </span><br><span class="line">    </span><br><span class="line">    // 内层循环控制从第0个键值和后一个键值比较，每次冒出一个最大的数</span><br><span class="line">    for ($k=0; $k &lt; $length-$i-1; $k++) &#123; </span><br><span class="line">      if($arr[$k] &gt; $arr[$k+1])&#123;</span><br><span class="line">        $tmp = $arr[$k+1];</span><br><span class="line">        $arr[$k+1] = $arr[$k];</span><br><span class="line">        $arr[$k] = $tmp;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return $arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>选择排序</li></ul><p>思路：每次选择一个相应的元素，然后将其放到指定的位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">function selectSort($arr)&#123;</span><br><span class="line"> </span><br><span class="line">  // 实现思路</span><br><span class="line">  // 双重循环完成，外层控制轮数，当前的最小值，内层控制比较次数</span><br><span class="line"></span><br><span class="line">  // 获取长度</span><br><span class="line">  $length = count($arr);</span><br><span class="line">  </span><br><span class="line">  for ($i=0; $i &lt; $length - 1; $i++) &#123; </span><br><span class="line">    // 假设最小值的位置</span><br><span class="line">    $p = $i;</span><br><span class="line">  </span><br><span class="line">    // 使用假设的最小值和其他值比较，找到当前的最小值</span><br><span class="line">    for ($j=$i+1; $j &lt; $length; $j++) &#123; </span><br><span class="line">      // $arr[$p] 是已知的当前最小值</span><br><span class="line">  </span><br><span class="line">      // 判断当前循环值和已知最小值的比较，当发下更小的值时记录下键，并进行下一次比较</span><br><span class="line">      if ($arr[$p] &gt; $arr[$j]) &#123;</span><br><span class="line">        $p = $j; // 比假设的值更小</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    // 通过内部for循环找到了当前最小值的key,并保存在$p中</span><br><span class="line">    // 判断 日光当前$p 中的键和假设的最小值的键不一致增将其互换</span><br><span class="line">    if ($p != $i) &#123;</span><br><span class="line">      $tmp = $arr[$p];</span><br><span class="line">      $arr[$p] = $arr[$i];</span><br><span class="line">      $arr[$i] = $tmp;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  // 返回最终结果</span><br><span class="line">  return $arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><h3 id="TCP-UDP区别"><a href="#TCP-UDP区别" class="headerlink" title="TCP/UDP区别"></a>TCP/UDP区别</h3><ul><li><p>TCP </p><p>TCP是一种面向连接的、可靠的、基于字节流的传输层通信协议<br>TCP面向连接，提供可靠地数据服务<br>TCP首部开销20字节<br>TCP逻辑通信信道是全双工的可靠信道<br>TCP连接只能是点到点的</p></li><li><p>UDP</p><p>UDP是参考模型中一种无连接的传输层协议，提供面向事务的简单不可靠的信息传递服务<br>UDP无连接，不可靠<br>UDP首部开销8字节<br>UDP逻辑通信信道是不可靠信道<br>UDP没有拥塞机制，因此网络出现拥堵不会使源主机的发送效率降低<br>UDP支持一对一，多对一，多对多的交互通信</p></li></ul><h3 id="三次握手，四次挥手，为什么是三次握手四次挥手"><a href="#三次握手，四次挥手，为什么是三次握手四次挥手" class="headerlink" title="三次握手，四次挥手，为什么是三次握手四次挥手"></a>三次握手，四次挥手，为什么是三次握手四次挥手</h3><p>在TCP/IP协议中,TCP协议提供可靠的连接服务,采用三次握手建立一个连接，完成三次握手,客户端与服务器开始传送数据。<br>简单点说：A与B建立TCP连接时，首先A向B发送SYN（同步请求），然后B回复SYN+ACK（同步请求应答），最后A回复ACK确认，这样TCP的一次连接（三次握手）就完成了。</p><ul><li>TCP三次握手</li></ul><p>所谓三次握手，是指简历一个TCP连接时需要客户端和服务器总共发送三个包<br>三次握手的目的是连接服务器指定端口，简历TCP连接，并同步连接双方的序列号并交换TCP窗口大小信息。<br>TCP三次握手图解：</p><p><a href="https://segmentfault.com/img/remote/1460000013696436?w=714&amp;h=537" title="三次握手" class="gallery-item" target="_blank" rel="noopener"><img src="https://segmentfault.com/img/remote/1460000013696436?w=714&amp;h=537" alt="三次握手" title="描述"></a></p><p>第一次握手<br>客户端发送一个TCP的SYN标志位置1的包，指明客户打算连接的服务器的端口，以及初始化序号，保存在包头的序列号字段里<br>第二次握手<br>服务器发挥确认包应答，即SYN标志位和ACK标志均为1，同时将确认序号设置为客户的ISN加1，即X+1<br>第三次握手<br>客户端再次发送确认包，SYN标识为0，ACK标识为1，并且把服务器发来的序号字段+1，放在确定字段中发送给对方，并且在数据字段写入ISN的+1<br>简单解释TCP三次握手：<br>参考：<a href="https://github.com/jawil/blog.." target="_blank" rel="noopener">https://github.com/jawil/blog..</a>.</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    <summary type="html">
    
      周末之前把这个知识梳理整理完，感谢各位的点赞、收藏和关注，大家一起努力。
    
    </summary>
    
      <category term="后端" scheme="http://marvin9002.github.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="PHP" scheme="http://marvin9002.github.com/tags/PHP/"/>
    
      <category term="面试" scheme="http://marvin9002.github.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="算法" scheme="http://marvin9002.github.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="网络" scheme="http://marvin9002.github.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="设计模式" scheme="http://marvin9002.github.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>python +splinter自动刷新抢票</title>
    <link href="http://marvin9002.github.com/2018/03/31/python-splinter%E8%87%AA%E5%8A%A8%E5%88%B7%E6%96%B0%E6%8A%A2%E7%A5%A8/"/>
    <id>http://marvin9002.github.com/2018/03/31/python-splinter自动刷新抢票/</id>
    <published>2018-03-31T09:48:09.000Z</published>
    <updated>2018-03-31T09:53:13.985Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css"><div class=".article-gallery" <p="">一年一度的春运又来了，<p></p><p>今年我自己写了个抢票脚本。</p><p>python +splinter自动刷新抢票，可以成功抢到（依赖自己的网络环境太厉害，还有机器的好坏），</p><p>但是感觉不是很完美!</p><a id="more"></a><p>有大神请指导完善一下（或者有没有别的好点的思路）</p><p>不胜感谢</p><p>废话不多说，代码帅上来!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">@author: liuyw</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">from splinter.browser import Browser</span><br><span class="line">from time import sleep</span><br><span class="line">import traceback</span><br><span class="line">import time, sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class huoche(object):</span><br><span class="line">&quot;&quot;&quot;docstring for huoche&quot;&quot;&quot;</span><br><span class="line">driver_name=&apos;&apos;</span><br><span class="line">executable_path=&apos;&apos;</span><br><span class="line">#用户名，密码</span><br><span class="line">username = u&quot;xxx@qq.com&quot;</span><br><span class="line">passwd = u&quot;xxxx&quot;</span><br><span class="line"># cookies值得自己去找, 下面两个分别是上海, 太原南</span><br><span class="line">starts = u&quot;%u4E0A%u6D77%2CSHH&quot;</span><br><span class="line">ends = u&quot;%u592A%u539F%2CTYV&quot;</span><br><span class="line"># 时间格式2018-01-19</span><br><span class="line">dtime = u&quot;2018-01-19&quot;</span><br><span class="line"># 车次，选择第几趟，0则从上之下依次点击</span><br><span class="line">order = 0</span><br><span class="line">###乘客名</span><br><span class="line">users = [u&quot;xxx&quot;,u&quot;xxx&quot;]</span><br><span class="line">##席位</span><br><span class="line">xb = u&quot;二等座&quot;</span><br><span class="line">pz=u&quot;成人票&quot;</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;网址&quot;&quot;&quot;</span><br><span class="line">ticket_url = &quot;https://kyfw.12306.cn/otn/leftTicket/init&quot;</span><br><span class="line">login_url = &quot;https://kyfw.12306.cn/otn/login/init&quot;</span><br><span class="line">initmy_url = &quot;https://kyfw.12306.cn/otn/index/initMy12306&quot;</span><br><span class="line">buy=&quot;https://kyfw.12306.cn/otn/confirmPassenger/initDc&quot;</span><br><span class="line">login_url=&apos;https://kyfw.12306.cn/otn/login/init&apos;</span><br><span class="line">def __init__(self):</span><br><span class="line">self.driver_name=&apos;chrome&apos;</span><br><span class="line">self.executable_path=&apos;/usr/local/bin/chromedriver&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def login(self):</span><br><span class="line">self.driver.visit(self.login_url)</span><br><span class="line">self.driver.fill(&quot;loginUserDTO.user_name&quot;, self.username)</span><br><span class="line"># sleep(1)</span><br><span class="line">self.driver.fill(&quot;userDTO.password&quot;, self.passwd)</span><br><span class="line">print u&quot;等待验证码，自行输入...&quot;</span><br><span class="line">while True:</span><br><span class="line">if self.driver.url != self.initmy_url:</span><br><span class="line">sleep(1)</span><br><span class="line">else:</span><br><span class="line">break</span><br><span class="line"></span><br><span class="line">def start(self):</span><br><span class="line">self.driver=Browser(driver_name=self.driver_name,executable_path=self.executable_path)</span><br><span class="line">self.driver.driver.set_window_size(1400, 1000)</span><br><span class="line">self.login()</span><br><span class="line"># sleep(1)</span><br><span class="line">self.driver.visit(self.ticket_url)</span><br><span class="line">try:</span><br><span class="line">print u&quot;购票页面开始...&quot;</span><br><span class="line"># sleep(1)</span><br><span class="line"># 加载查询信息</span><br><span class="line">self.driver.cookies.add(&#123;&quot;_jc_save_fromStation&quot;: self.starts&#125;)</span><br><span class="line">self.driver.cookies.add(&#123;&quot;_jc_save_toStation&quot;: self.ends&#125;)</span><br><span class="line">self.driver.cookies.add(&#123;&quot;_jc_save_fromDate&quot;: self.dtime&#125;)</span><br><span class="line"></span><br><span class="line">self.driver.reload()</span><br><span class="line"></span><br><span class="line">count=0</span><br><span class="line">if self.order!=0:</span><br><span class="line">while self.driver.url==self.ticket_url:</span><br><span class="line">self.driver.find_by_text(u&quot;查询&quot;).click()</span><br><span class="line">count += 1</span><br><span class="line">print u&quot;循环点击查询... 第 %s 次&quot; % count</span><br><span class="line"># sleep(1)</span><br><span class="line">try:</span><br><span class="line">self.driver.find_by_text(u&quot;预订&quot;)[self.order - 1].click()</span><br><span class="line">except Exception as e:</span><br><span class="line">print e</span><br><span class="line">print u&quot;还没开始预订&quot;</span><br><span class="line">continue</span><br><span class="line">else:</span><br><span class="line">while self.driver.url == self.ticket_url:</span><br><span class="line">self.driver.find_by_text(u&quot;查询&quot;).click()</span><br><span class="line">count += 1</span><br><span class="line">print u&quot;循环点击查询... 第 %s 次&quot; % count</span><br><span class="line"># sleep(0.8)</span><br><span class="line">try:</span><br><span class="line">for i in self.driver.find_by_text(u&quot;预订&quot;):</span><br><span class="line">i.click()</span><br><span class="line">sleep(1)</span><br><span class="line">except Exception as e:</span><br><span class="line">print e</span><br><span class="line">print u&quot;还没开始预订 %s&quot; %count</span><br><span class="line">continue</span><br><span class="line">print u&quot;开始预订...&quot;</span><br><span class="line"># sleep(3)</span><br><span class="line"># self.driver.reload()</span><br><span class="line">sleep(1)</span><br><span class="line">print u&apos;开始选择用户...&apos;</span><br><span class="line">for user in self.users:</span><br><span class="line">self.driver.find_by_text(user).last.click()</span><br><span class="line"></span><br><span class="line">print u&quot;提交订单...&quot;</span><br><span class="line">sleep(1)</span><br><span class="line"># self.driver.find_by_text(self.pz).click()</span><br><span class="line"># self.driver.find_by_id(&apos;&apos;).select(self.pz)</span><br><span class="line"># # sleep(1)</span><br><span class="line"># self.driver.find_by_text(self.xb).click()</span><br><span class="line"># sleep(1)</span><br><span class="line">self.driver.find_by_id(&apos;submitOrder_id&apos;).click()</span><br><span class="line"># print u&quot;开始选座...&quot;</span><br><span class="line"># self.driver.find_by_id(&apos;1D&apos;).last.click()</span><br><span class="line"># self.driver.find_by_id(&apos;1F&apos;).last.click()</span><br><span class="line"></span><br><span class="line">sleep(1.5)</span><br><span class="line">print u&quot;确认选座...&quot;</span><br><span class="line">self.driver.find_by_id(&apos;qr_submit_id&apos;).click()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">except Exception as e:</span><br><span class="line">print e</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">huoche=huoche()</span><br><span class="line">huoche.start()</span><br></pre></td></tr></table></figure></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    <summary type="html">
    
      一年一度的春运又来了，今年我自己写了个抢票脚本。python +splinter自动刷新抢票，可以成功抢到（依赖自己的网络环境太厉害，还有机器的好坏），但是感觉不是很完美，有大神请指导完善一下（或者有没有别的好点的思路）不胜感谢
    
    </summary>
    
      <category term="后端" scheme="http://marvin9002.github.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="python" scheme="http://marvin9002.github.com/tags/python/"/>
    
      <category term="splinter" scheme="http://marvin9002.github.com/tags/splinter/"/>
    
      <category term="火车票" scheme="http://marvin9002.github.com/tags/%E7%81%AB%E8%BD%A6%E7%A5%A8/"/>
    
  </entry>
  
  <entry>
    <title>PHP高效导出Excel(CSV)</title>
    <link href="http://marvin9002.github.com/2018/03/31/PHP%E9%AB%98%E6%95%88%E5%AF%BC%E5%87%BAExcel-CSV/"/>
    <id>http://marvin9002.github.com/2018/03/31/PHP高效导出Excel-CSV/</id>
    <published>2018-03-31T09:04:05.000Z</published>
    <updated>2018-03-31T10:14:58.890Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css"><div class=".article-gallery" <p="">CSV，是Comma Separated Value（逗号分隔值）的英文缩写，通常都是纯文本文件。<br>如果你导出的Excel没有什么高级用法的话，只是做导出数据用那么建议使用本方法,要比PHPexcel要高效的多。<br>二十万数据导出大概需要2到3秒。<p></p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"> /**</span><br><span class="line"> * 导出excel(csv)</span><br><span class="line"> * @data 导出数据</span><br><span class="line"> * @headlist 第一行,列名</span><br><span class="line"> * @fileName 输出Excel文件名</span><br><span class="line"> */</span><br><span class="line">function csv_export($data = array(), $headlist = array(), $fileName) &#123;</span><br><span class="line">  </span><br><span class="line">    header(&apos;Content-Type: application/vnd.ms-excel&apos;);</span><br><span class="line">    header(&apos;Content-Disposition: attachment;filename=&quot;&apos;.$fileName.&apos;.csv&quot;&apos;);</span><br><span class="line">    header(&apos;Cache-Control: max-age=0&apos;);</span><br><span class="line">  </span><br><span class="line">    //打开PHP文件句柄,php://output 表示直接输出到浏览器</span><br><span class="line">    $fp = fopen(&apos;php://output&apos;, &apos;a&apos;);</span><br><span class="line">    </span><br><span class="line">    //输出Excel列名信息</span><br><span class="line">    foreach ($headlist as $key =&gt; $value) &#123;</span><br><span class="line">        //CSV的Excel支持GBK编码，一定要转换，否则乱码</span><br><span class="line">        $headlist[$key] = iconv(&apos;utf-8&apos;, &apos;gbk&apos;, $value);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    //将数据通过fputcsv写到文件句柄</span><br><span class="line">    fputcsv($fp, $headlist);</span><br><span class="line">    </span><br><span class="line">    //计数器</span><br><span class="line">    $num = 0;</span><br><span class="line">    </span><br><span class="line">    //每隔$limit行，刷新一下输出buffer，不要太大，也不要太小</span><br><span class="line">    $limit = 100000;</span><br><span class="line">    </span><br><span class="line">    //逐行取出数据，不浪费内存</span><br><span class="line">    $count = count($data);</span><br><span class="line">    for ($i = 0; $i &lt; $count; $i++) &#123;</span><br><span class="line">    </span><br><span class="line">        $num++;</span><br><span class="line">        </span><br><span class="line">        //刷新一下输出buffer，防止由于数据过多造成问题</span><br><span class="line">        if ($limit == $num) &#123; </span><br><span class="line">            ob_flush();</span><br><span class="line">            flush();</span><br><span class="line">            $num = 0;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        $row = $data[$i];</span><br><span class="line">        foreach ($row as $key =&gt; $value) &#123;</span><br><span class="line">            $row[$key] = iconv(&apos;utf-8&apos;, &apos;gbk&apos;, $value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fputcsv($fp, $row);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    <summary type="html">
    
      CSV，是Comma Separated Value（逗号分隔值）的英文缩写，通常都是纯文本文件。
    
    </summary>
    
      <category term="后端" scheme="http://marvin9002.github.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="PHP" scheme="http://marvin9002.github.com/tags/PHP/"/>
    
      <category term="CSV" scheme="http://marvin9002.github.com/tags/CSV/"/>
    
  </entry>
  
</feed>
