{"meta":{"title":"柳英伟博客","subtitle":"柳英伟博客","description":"柳英伟博客","author":"柳英伟","url":"http://marvin9002.github.com"},"pages":[{"title":"tags","date":"2018-03-30T06:37:32.000Z","updated":"2018-03-30T06:37:32.194Z","comments":true,"path":"tags/index.html","permalink":"http://marvin9002.github.com/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2018-03-30T06:37:49.000Z","updated":"2018-03-30T06:37:49.655Z","comments":true,"path":"categories/index.html","permalink":"http://marvin9002.github.com/categories/index.html","excerpt":"","text":""},{"title":"关于我","date":"2018-03-31T11:02:45.000Z","updated":"2018-03-31T11:15:47.013Z","comments":true,"path":"about/index.html","permalink":"http://marvin9002.github.com/about/index.html","excerpt":"","text":"柳英伟趣头条 — PHP开发工程师 男 ︳本科 ︳ 3年工作经验 ︳ 上海18721137357 ︳448332799@qq.com 工作经历趣头条 — PHP开发工程师 2018年03月 — 至今 岗位职责：主要负责去多怕产品后台API开发 上海聚力传媒技术有限公司 PHP SED 2016.05-至今 岗位职责：在职期间主要负责部分板块的重构和功能开发，跟踪维护及部分相关紧急bug的解决，移动端pc端web都有涉及。 1.PPTV主站产品的开发维护 2.PPTV M站重构 3.二次元ACG，passport开发、imageAPI开发、PPyun 视频上传接口开发 4.PGC接口开发 5.投票系统开发 上海晨之科 php开发工程师 2015.08-2016.05 岗位职责：1、MTBI系统的前后台底层架构实现；2、后台核心业务逻辑实现和相关接口实现；3、网站程序模块的设计、编码；4、系统日常维护和bug处理 、服务器维护；5、公司其他独立公共项目开发和上线工作； 上海顶想信息科技有限公司 php程序猿 2014.07-2015.08 岗位职责：1、主要负责公司基于ThinkPHP框架的前后台研发工作；2、根据需求开发公司外包项目； 山西龙采科技（忻州分公司） PHP程序员 2013.03-2013.07 岗位职责：1、根据设计图写出合适的页面 教育经历忻州师范学院 本科 • 工商管理 2014年毕业 上海创恩IT教育 其他 • PHP软件工程师 2013年毕业 项目经验 投票系统 后端程序开发 2017.10-至今软件环境：LNMP+redis硬件环境：CentOS开发工具：netbeans项目描述：基于应用的投票系统，应用数据存储到DB，投票数据存储到redis责任描述：数据库设计、后端程序研发 二次元ACG passport开发、imageAPI开发、PPyun 视频上传接口开发 2016.12-至今软件环境：LNMP硬件环境：CentOS开发工具：netbeans项目描述：类似B站的二次元视频网站采用CI开发。责任描述：数据库设计、后端程序研发,HTTPS协议。 passport： 单独的用户登陆、注册服务 imageAPI： 单独的图片管理服务，包含图片上传、裁剪、生产缩略、添加水印、图片合成等接口 PPyun： 利用PPyun接口集成上传视频组件，把用户视频上传到PPyun。 PGC接口 开发 2016.11-2016.11软件环境：LNMP +redis+lvs硬件环境：CentOS开发工具：netbeans项目描述：程序调用后端底层服务，封装PGC用户信息，写入redis缓存，提供接口服务，供其它业务使用责任描述：接口程序开发 PPTV M站 后端开发 2016.08-2016.11重构原有的M站抛弃了原来的平台化架构，采用CI框架独立代码库对接Epg接口、实现在线播放，播放串解码、定时上线、图片比例智能转换 PGC个人主页 项目职责： 后端开发、接口集成、PGC个人主页、列表页，播放页、搜索页 战场双马尾抽卡活动 前后端开发 2016.04-2016.04软件环境：LAMP硬件环境：阿里云开发工具：netbeans项目描述：G站APP内抽奖活动站。前端用JQuery后端ThinkPHP开发主要包含用户校验、抽奖发送短信抽奖CDkey、奖池和奖品管理、CDkey导入、活动统计、活动分享责任描述：前后端研发、数据库设计 MTBI3.0 前后端开发 2015.12-2016.02主要包含用户管理、用户单点登录、权限控制（单页面权限+后台访问权限）、操作日志、页面模块管理，应用参数配置，邮件日报发送（JpGraph生成图+excel文件），数据库备份等功能，使用redis缓存和存储数据、CORS软件环境：LAMP硬件环境：CentOS开发工具：netbeans项目描述：公司内部数据分析平台,前端用angularjs实现单页面应用，采用API接口方式从后端获取数据，后端采用ThinkPHP开发 ！责任描述：前后端研发 今天吃什么礼包系统开发 今天吃什么（游戏）礼包系统开发 2015.11-2015.11软件环境：LAMP硬件环境：CentOS开发工具：netbeans项目描述：游戏礼包的发放与管理采用ThinkPHP开发。责任描述：数据库设计、后端程序研发 白猫计划资料站 前后端开发 2015.08-2015.08软件环境：LAMP硬件环境：阿里云开发工具：netbeans项目描述：游戏资料、攻略站，前端用angularjs后端ThinkPHP开发主要包含游戏角色、武器资料的管理，excel文档资料导入责任描述：前后端研发、数据库设计 华人圈 小组、积分机制、凑热闹、个人中心、达人等模块开发 2014.12-2015.05软件环境：LNMP硬件环境：CentOS开发工具：netbeans项目描述：此站位多地区、多语言、多客户端架构责任描述：前后端研发、数据库设计小组、积分机制、凑热闹、个人中心、达人等模块API开发 、功能实现开发 advantek中文 后端程序开发 2015.03-2015.03一个小企业站，使用OneThink做二次开发 猎酷网 会员中心、用户反馈、开站内消息开发 2014.10-2014.11软件环境：LAMP硬件环境：CentOS开发工具：netbeans项目描述：猎酷网（www.lieku.tv）是国家新闻出版总局广播电视规划院旗下网站。责任描述：会员中心、用户反馈、开站内消息开发 五台山青春旅行社 主程序开发 2013.11-2013.12项目的整体开发，前端布局+后端程序开发！项目简介：程序主要功能包含：在线预定酒店，线路预定，在线商城，会员中心，在线许愿，支付宝接口。http://www.wtsqc.com/ 作品展示http://www.lieku.tv/猎酷网 自我描述1、3年半PHP经验， 熟悉前后端的各种主流框架，理解OOP思想，使用MVC开发模式，熟悉ThinkPHP、CI的组织结构和运作和实际应用开发， 有较强的逻辑思维思想。2、具备一定的前端开发能力、服务器的一般维护3、熟悉互联网软件的开发流程，可在Windows以及Mac OS、LINUX下进行项目开发。4、熟悉常见后端的环境搭建和使用，Git使用，项目部署，服务器日常管理维护等。5、对docker虚拟容器也有一点学习使用经验。6、目前在学习PHP的设计模式、语言优化和性能调试等方面的知识。 7、熟悉python语言、能够使用python完成一般性的开发。7、能够使用docker搭建生产测试环境8、有memcache，redis使用经验！9、喜欢专研各自技术，学习能力强！上进心强！ 技能评价 PHP■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ 精通 thinkphp■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ 精通 ajax■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ 精通 jquery■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ 掌握 angularjs■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ 精通"},{"title":"tags","date":"2018-03-31T12:10:21.000Z","updated":"2018-03-31T12:10:21.515Z","comments":true,"path":"tags/index-1.html","permalink":"http://marvin9002.github.com/tags/index-1.html","excerpt":"","text":""},{"title":"Repositories","date":"2018-03-31T14:35:16.799Z","updated":"2018-03-31T14:35:16.799Z","comments":false,"path":"repository/index.html","permalink":"http://marvin9002.github.com/repository/index.html","excerpt":"","text":""},{"title":"书单","date":"2018-03-31T14:35:16.798Z","updated":"2018-03-31T14:35:16.798Z","comments":false,"path":"books/index.html","permalink":"http://marvin9002.github.com/books/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2018-03-31T14:35:16.799Z","updated":"2018-03-31T14:35:16.799Z","comments":true,"path":"links/index.html","permalink":"http://marvin9002.github.com/links/index.html","excerpt":"","text":""}],"posts":[{"title":"PHP面试知识梳理","slug":"PHP面试知识梳理","date":"2018-03-31T09:55:04.000Z","updated":"2018-03-31T11:21:24.941Z","comments":true,"path":"2018/03/31/PHP面试知识梳理/","link":"","permalink":"http://marvin9002.github.com/2018/03/31/PHP面试知识梳理/","excerpt":"昨天在思否上发了这篇整理，晚上10点多看到了很多赞收藏和关注，其实挺愧疚的，因为最近在找工作这篇文章并没有整理完。看到这个还挺受欢迎的，也因为新工作基本定下来了，现在的公司正常交接中，打算下周末之前把这个知识梳理整理完，感谢各位的点赞、收藏和关注，大家一起努力。","text":"昨天在思否上发了这篇整理，晚上10点多看到了很多赞收藏和关注，其实挺愧疚的，因为最近在找工作这篇文章并没有整理完。看到这个还挺受欢迎的，也因为新工作基本定下来了，现在的公司正常交接中，打算下周末之前把这个知识梳理整理完，感谢各位的点赞、收藏和关注，大家一起努力。 算法与数据结构BTree和B+tree BTree B树是为了磁盘或者其他存储设备而设计的一种多叉平衡查找树，相对于二叉树，B树的每个内节点有多个分支，即多叉。 参考文章：https://www.jianshu.com/p/da59af78ec59 B+Tree B+树是B树的变体，也是一种多路搜索树。 参考文章：https://www.jianshu.com/p/da59af78ec59 排序算法 快速排序 快速排序是十分常用的高效率的算法，其思想是：先选一个标尺，用它把整个队列过一遍筛选，以保证其左边的元素都不大于它，其右边的元素都不小与它 12345678910111213141516171819202122232425262728293031323334353637function quickSort($arr)&#123; // 获取数组长度 $length = count($arr); // 判断长度是否需要继续二分比较 if($length &lt;= 1)&#123; return $arr; &#125; // 定义基准元素 $base = $arr[0]; // 定义两个空数组，用于存放和基准元素的比较后的结果 $left = []; $right = []; // 遍历数组 for ($i=1; $i &lt; $length; $i++) &#123; // 和基准元素作比较 if ($arr[$i] &gt; $base) &#123; $right[] = $arr[$i]; &#125;else &#123; $left[] = $arr[$i]; &#125; &#125; // 然后递归分别处理left和right $left = quickSort($left); $right = quickSort($right); // 合并 return array_merge($left,[$base],$right); &#125; 冒泡排序 思路：法如其名，就像冒泡一样，每次从数组中冒出一个最大的数比如：2，4，1第一次冒出4：2，1，4第二次冒出2：1，2，4 1234567891011121314151617181920function bubbleSort($arr)&#123; // 获取数组长度 $length = count($arr); // 第一层循环控制冒泡轮次 for ($i=0; $i &lt; $length-1; $i++) &#123; // 内层循环控制从第0个键值和后一个键值比较，每次冒出一个最大的数 for ($k=0; $k &lt; $length-$i-1; $k++) &#123; if($arr[$k] &gt; $arr[$k+1])&#123; $tmp = $arr[$k+1]; $arr[$k+1] = $arr[$k]; $arr[$k] = $tmp; &#125; &#125; &#125; return $arr;&#125; 选择排序 思路：每次选择一个相应的元素，然后将其放到指定的位置 123456789101112131415161718192021222324252627282930313233function selectSort($arr)&#123; // 实现思路 // 双重循环完成，外层控制轮数，当前的最小值，内层控制比较次数 // 获取长度 $length = count($arr); for ($i=0; $i &lt; $length - 1; $i++) &#123; // 假设最小值的位置 $p = $i; // 使用假设的最小值和其他值比较，找到当前的最小值 for ($j=$i+1; $j &lt; $length; $j++) &#123; // $arr[$p] 是已知的当前最小值 // 判断当前循环值和已知最小值的比较，当发下更小的值时记录下键，并进行下一次比较 if ($arr[$p] &gt; $arr[$j]) &#123; $p = $j; // 比假设的值更小 &#125; &#125; // 通过内部for循环找到了当前最小值的key,并保存在$p中 // 判断 日光当前$p 中的键和假设的最小值的键不一致增将其互换 if ($p != $i) &#123; $tmp = $arr[$p]; $arr[$p] = $arr[$i]; $arr[$i] = $tmp; &#125; &#125; // 返回最终结果 return $arr;&#125; 计算机网络TCP/UDP区别 TCP TCP是一种面向连接的、可靠的、基于字节流的传输层通信协议TCP面向连接，提供可靠地数据服务TCP首部开销20字节TCP逻辑通信信道是全双工的可靠信道TCP连接只能是点到点的 UDP UDP是参考模型中一种无连接的传输层协议，提供面向事务的简单不可靠的信息传递服务UDP无连接，不可靠UDP首部开销8字节UDP逻辑通信信道是不可靠信道UDP没有拥塞机制，因此网络出现拥堵不会使源主机的发送效率降低UDP支持一对一，多对一，多对多的交互通信 三次握手，四次挥手，为什么是三次握手四次挥手在TCP/IP协议中,TCP协议提供可靠的连接服务,采用三次握手建立一个连接，完成三次握手,客户端与服务器开始传送数据。简单点说：A与B建立TCP连接时，首先A向B发送SYN（同步请求），然后B回复SYN+ACK（同步请求应答），最后A回复ACK确认，这样TCP的一次连接（三次握手）就完成了。 TCP三次握手 1234所谓三次握手，是指简历一个TCP连接时需要客户端和服务器总共发送三个包三次握手的目的是连接服务器指定端口，简历TCP连接，并同步连接双方的序列号并交换TCP窗口大小信息。TCP三次握手图解：https://segmentfault.com/img/remote/1460000013696436?w=714&amp;h=537 第一次握手客户端发送一个TCP的SYN标志位置1的包，指明客户打算连接的服务器的端口，以及初始化序号，保存在包头的序列号字段里第二次握手服务器发挥确认包应答，即SYN标志位和ACK标志均为1，同时将确认序号设置为客户的ISN加1，即X+1第三次握手客户端再次发送确认包，SYN标识为0，ACK标识为1，并且把服务器发来的序号字段+1，放在确定字段中发送给对方，并且在数据字段写入ISN的+1简单解释TCP三次握手：参考：https://github.com/jawil/blog...","categories":[{"name":"后端","slug":"后端","permalink":"http://marvin9002.github.com/categories/后端/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"http://marvin9002.github.com/tags/PHP/"},{"name":"面试","slug":"面试","permalink":"http://marvin9002.github.com/tags/面试/"},{"name":"算法","slug":"算法","permalink":"http://marvin9002.github.com/tags/算法/"},{"name":"网络","slug":"网络","permalink":"http://marvin9002.github.com/tags/网络/"},{"name":"设计模式","slug":"设计模式","permalink":"http://marvin9002.github.com/tags/设计模式/"}]},{"title":"python +splinter自动刷新抢票","slug":"python-splinter自动刷新抢票","date":"2018-03-31T09:48:09.000Z","updated":"2018-03-31T09:53:13.985Z","comments":true,"path":"2018/03/31/python-splinter自动刷新抢票/","link":"","permalink":"http://marvin9002.github.com/2018/03/31/python-splinter自动刷新抢票/","excerpt":"一年一度的春运又来了， 今年我自己写了个抢票脚本。 python +splinter自动刷新抢票，可以成功抢到（依赖自己的网络环境太厉害，还有机器的好坏）， 但是感觉不是很完美!","text":"一年一度的春运又来了， 今年我自己写了个抢票脚本。 python +splinter自动刷新抢票，可以成功抢到（依赖自己的网络环境太厉害，还有机器的好坏）， 但是感觉不是很完美! 有大神请指导完善一下（或者有没有别的好点的思路） 不胜感谢 废话不多说，代码帅上来! 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134# -*- coding: utf-8 -*-&quot;&quot;&quot;@author: liuyw&quot;&quot;&quot;from splinter.browser import Browserfrom time import sleepimport tracebackimport time, sysclass huoche(object): &quot;&quot;&quot;docstring for huoche&quot;&quot;&quot; driver_name=&apos;&apos; executable_path=&apos;&apos; #用户名，密码 username = u&quot;xxx@qq.com&quot; passwd = u&quot;xxxx&quot; # cookies值得自己去找, 下面两个分别是上海, 太原南 starts = u&quot;%u4E0A%u6D77%2CSHH&quot; ends = u&quot;%u592A%u539F%2CTYV&quot; # 时间格式2018-01-19 dtime = u&quot;2018-01-19&quot; # 车次，选择第几趟，0则从上之下依次点击 order = 0 ###乘客名 users = [u&quot;xxx&quot;,u&quot;xxx&quot;] ##席位 xb = u&quot;二等座&quot; pz=u&quot;成人票&quot; &quot;&quot;&quot;网址&quot;&quot;&quot; ticket_url = &quot;https://kyfw.12306.cn/otn/leftTicket/init&quot; login_url = &quot;https://kyfw.12306.cn/otn/login/init&quot; initmy_url = &quot;https://kyfw.12306.cn/otn/index/initMy12306&quot; buy=&quot;https://kyfw.12306.cn/otn/confirmPassenger/initDc&quot; login_url=&apos;https://kyfw.12306.cn/otn/login/init&apos; def __init__(self): self.driver_name=&apos;chrome&apos; self.executable_path=&apos;/usr/local/bin/chromedriver&apos; def login(self): self.driver.visit(self.login_url) self.driver.fill(&quot;loginUserDTO.user_name&quot;, self.username) # sleep(1) self.driver.fill(&quot;userDTO.password&quot;, self.passwd) print u&quot;等待验证码，自行输入...&quot; while True: if self.driver.url != self.initmy_url: sleep(1) else: break def start(self): self.driver=Browser(driver_name=self.driver_name,executable_path=self.executable_path) self.driver.driver.set_window_size(1400, 1000) self.login() # sleep(1) self.driver.visit(self.ticket_url) try: print u&quot;购票页面开始...&quot; # sleep(1) # 加载查询信息 self.driver.cookies.add(&#123;&quot;_jc_save_fromStation&quot;: self.starts&#125;) self.driver.cookies.add(&#123;&quot;_jc_save_toStation&quot;: self.ends&#125;) self.driver.cookies.add(&#123;&quot;_jc_save_fromDate&quot;: self.dtime&#125;) self.driver.reload() count=0 if self.order!=0: while self.driver.url==self.ticket_url: self.driver.find_by_text(u&quot;查询&quot;).click() count += 1 print u&quot;循环点击查询... 第 %s 次&quot; % count # sleep(1) try: self.driver.find_by_text(u&quot;预订&quot;)[self.order - 1].click() except Exception as e: print e print u&quot;还没开始预订&quot; continue else: while self.driver.url == self.ticket_url: self.driver.find_by_text(u&quot;查询&quot;).click() count += 1 print u&quot;循环点击查询... 第 %s 次&quot; % count # sleep(0.8) try: for i in self.driver.find_by_text(u&quot;预订&quot;): i.click() sleep(1) except Exception as e: print e print u&quot;还没开始预订 %s&quot; %count continue print u&quot;开始预订...&quot; # sleep(3) # self.driver.reload() sleep(1) print u&apos;开始选择用户...&apos; for user in self.users: self.driver.find_by_text(user).last.click() print u&quot;提交订单...&quot; sleep(1) # self.driver.find_by_text(self.pz).click() # self.driver.find_by_id(&apos;&apos;).select(self.pz) # # sleep(1) # self.driver.find_by_text(self.xb).click() # sleep(1) self.driver.find_by_id(&apos;submitOrder_id&apos;).click() # print u&quot;开始选座...&quot; # self.driver.find_by_id(&apos;1D&apos;).last.click() # self.driver.find_by_id(&apos;1F&apos;).last.click() sleep(1.5) print u&quot;确认选座...&quot; self.driver.find_by_id(&apos;qr_submit_id&apos;).click() except Exception as e: print eif __name__ == &apos;__main__&apos;: huoche=huoche() huoche.start()","categories":[{"name":"后端","slug":"后端","permalink":"http://marvin9002.github.com/categories/后端/"}],"tags":[{"name":"python","slug":"python","permalink":"http://marvin9002.github.com/tags/python/"},{"name":"splinter","slug":"splinter","permalink":"http://marvin9002.github.com/tags/splinter/"},{"name":"火车票","slug":"火车票","permalink":"http://marvin9002.github.com/tags/火车票/"}]},{"title":"PHP高效导出Excel(CSV)","slug":"PHP高效导出Excel-CSV","date":"2018-03-31T09:04:05.000Z","updated":"2018-03-31T10:14:58.890Z","comments":true,"path":"2018/03/31/PHP高效导出Excel-CSV/","link":"","permalink":"http://marvin9002.github.com/2018/03/31/PHP高效导出Excel-CSV/","excerpt":"CSV，是Comma Separated Value（逗号分隔值）的英文缩写，通常都是纯文本文件。如果你导出的Excel没有什么高级用法的话，只是做导出数据用那么建议使用本方法,要比PHPexcel要高效的多。二十万数据导出大概需要2到3秒。","text":"CSV，是Comma Separated Value（逗号分隔值）的英文缩写，通常都是纯文本文件。如果你导出的Excel没有什么高级用法的话，只是做导出数据用那么建议使用本方法,要比PHPexcel要高效的多。二十万数据导出大概需要2到3秒。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051 /** * 导出excel(csv) * @data 导出数据 * @headlist 第一行,列名 * @fileName 输出Excel文件名 */function csv_export($data = array(), $headlist = array(), $fileName) &#123; header(&apos;Content-Type: application/vnd.ms-excel&apos;); header(&apos;Content-Disposition: attachment;filename=&quot;&apos;.$fileName.&apos;.csv&quot;&apos;); header(&apos;Cache-Control: max-age=0&apos;); //打开PHP文件句柄,php://output 表示直接输出到浏览器 $fp = fopen(&apos;php://output&apos;, &apos;a&apos;); //输出Excel列名信息 foreach ($headlist as $key =&gt; $value) &#123; //CSV的Excel支持GBK编码，一定要转换，否则乱码 $headlist[$key] = iconv(&apos;utf-8&apos;, &apos;gbk&apos;, $value); &#125; //将数据通过fputcsv写到文件句柄 fputcsv($fp, $headlist); //计数器 $num = 0; //每隔$limit行，刷新一下输出buffer，不要太大，也不要太小 $limit = 100000; //逐行取出数据，不浪费内存 $count = count($data); for ($i = 0; $i &lt; $count; $i++) &#123; $num++; //刷新一下输出buffer，防止由于数据过多造成问题 if ($limit == $num) &#123; ob_flush(); flush(); $num = 0; &#125; $row = $data[$i]; foreach ($row as $key =&gt; $value) &#123; $row[$key] = iconv(&apos;utf-8&apos;, &apos;gbk&apos;, $value); &#125; fputcsv($fp, $row); &#125; &#125;","categories":[{"name":"后端","slug":"后端","permalink":"http://marvin9002.github.com/categories/后端/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"http://marvin9002.github.com/tags/PHP/"},{"name":"CSV","slug":"CSV","permalink":"http://marvin9002.github.com/tags/CSV/"}]}]}